{"version":3,"file":"webpack-wrapper.js","sourceRoot":"","sources":["../../src/webpack-wrapper.ts"],"names":[],"mappings":";AAAA,IAAY,OAAO,WAAM,SAAS,CAAC,CAAA;AACnC,4BAA0B,sBAAsB,CAAC,CAAA;AAEjD,uBAAiC,UAAU,CAAC,CAAA;AAE5C;IAKE,wBAAoB,iBAAyB;QAAzB,sBAAiB,GAAjB,iBAAiB,CAAQ;IAAI,CAAC;IAElD,6BAAI,GAAJ;QACE,IAAI,CAAC;YACH,IAAM,MAAM,GAAG,OAAO,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC;YAC/C,IAAI,CAAC,MAAM,GAAG,OAAO,MAAM,KAAK,UAAU,GAAG,MAAM,EAAE,GAAG,MAAM,CAAC;QACjE,CAAE;QAAA,KAAK,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;YACb,MAAM,IAAI,uBAAS,CAAC,4EAA0E,GAAG,CAAC,OAAS,CAAC,CAAC;QAC/G,CAAC;QAED,IAAI,CAAC,QAAQ,GAAG,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;QAErC,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,OAAO;aACxC,MAAM,CAAE,UAAA,CAAC,IAAI,OAAA,CAAC,YAAY,yBAAgB,EAA7B,CAA6B,CAAC,CAAC,CAAC,CAAC,CAAC;IACpD,CAAC;IAED,iDAAwB,GAAxB;QACE,EAAE,CAAC,CAAC,OAAO,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,oBAAoB,KAAK,UAAU,CAAC,CAAC,CAAC;YACnE,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,oBAAoB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACtD,CAAC;IACH,CAAC;IAED,+CAAsB,GAAtB,UAAuB,GAAU;QAC/B,EAAE,CAAC,CAAC,OAAO,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,kBAAkB,KAAK,UAAU,CAAC,CAAC,CAAC;YACjE,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,kBAAkB,CAAC,IAAI,CAAC,IAAI,EAAE,GAAG,CAAC,CAAC;QACzD,CAAC;IACH,CAAC;IACH,qBAAC;AAAD,CAAC,AAhCD,IAgCC;AAhCY,sBAAc,iBAgC1B,CAAA","sourcesContent":["import * as webpack from 'webpack';\nimport { UserError } from '@angular/tsc-wrapped';\n\nimport { NgcWebpackPlugin } from './plugin';\n\nexport class WebpackWrapper {\n  public compiler: any;\n  public config: any;\n  public plugin: NgcWebpackPlugin;\n\n  constructor(private webpackConfigPath: string) { }\n\n  init(): void {\n    try {\n      const config = require(this.webpackConfigPath);\n      this.config = typeof config === 'function' ? config() : config;\n    } catch (err) {\n      throw new UserError(`Invalid webpack configuration. Please set a valid --webpack argument.\\n${err.message}`);\n    }\n\n    this.compiler = webpack(this.config);\n\n    this.plugin = this.compiler.options.plugins\n      .filter( p => p instanceof NgcWebpackPlugin)[0];\n  }\n\n  emitOnCompilationSuccess(): void {\n    if (typeof this.plugin.options.onCompilationSuccess === 'function') {\n      this.plugin.options.onCompilationSuccess.call(this);\n    }\n  }\n\n  emitOnCompilationError(err: Error): void {\n    if (typeof this.plugin.options.onCompilationError === 'function') {\n      this.plugin.options.onCompilationError.call(this, err);\n    }\n  }\n}"]}