{"version":3,"file":"webpack-chain-module-resolution-host-adapter.js","sourceRoot":"","sources":["../../src/webpack-chain-module-resolution-host-adapter.ts"],"names":[],"mappings":";;;;;;AACA,6BAA4C,uBAAwB,CAAC,CAAA;AAErE,wCAAsC,2BAA2B,CAAC,CAAA;AAIlE;IAA6D,2DAA2B;IAItF,iDAAY,IAA0B,EAAS,cAA8B;QAC3E,kBAAM,IAAI,CAAC,CAAC;QADiC,mBAAc,GAAd,cAAc,CAAgB;QAE3E,IAAI,CAAC,OAAO,GAAG,IAAI,+CAAqB,CAAC,IAAI,CAAC,cAAc,CAAC,QAAQ,CAAC,iBAAiB,EAAE,CAAC,CAAC;QAE3F,IAAM,MAAM,GAAG,IAAI,CAAC,cAAc,CAAC,MAAM,CAAC;QAC1C,EAAE,CAAC,CAAC,MAAM,IAAI,OAAO,MAAM,CAAC,OAAO,CAAC,eAAe,KAAK,UAAU,CAAC,CAAC,CAAC;YACnE,IAAI,CAAC,gBAAgB,GAAG,MAAM,CAAC,OAAO,CAAC,eAAe,CAAC;QACzD,CAAC;IACH,CAAC;IAED,8DAAY,GAAZ,UAAa,IAAY;QAEvB,EAAE,CAAC,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC,CAAC;YAC1B,IAAI,GAAG,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,CAAC;YACnC,EAAE,CAAC,CAAC,IAAI,KAAK,EAAE,CAAC,CAAC,CAAC;gBAChB,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;YAC/B,CAAC;QACH,CAAC;QAED,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;YAC3B,MAAM,IAAI,KAAK,CAAC,kDAAgD,IAAM,CAAC,CAAC;QAC1E,CAAC;QAED,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;IAChC,CAAC;IACH,8CAAC;AAAD,CAAC,AA7BD,CAA6D,0CAA2B,GA6BvF;AA7BY,+CAAuC,0CA6BnD,CAAA","sourcesContent":["import { ModuleResolutionHost } from 'typescript';\nimport { ModuleResolutionHostAdapter } from '@angular/compiler-cli' ;\n\nimport { WebpackResourceLoader } from './webpack-resource-loader';\nimport { PathTransformer } from './plugin';\nimport { WebpackWrapper } from './webpack-wrapper';\n\nexport class WebpackChainModuleResolutionHostAdapter extends ModuleResolutionHostAdapter {\n  private _loader: WebpackResourceLoader;\n  private _pathTransformer: PathTransformer;\n\n  constructor(host: ModuleResolutionHost, public webpackWrapper: WebpackWrapper) {\n    super(host);\n    this._loader = new WebpackResourceLoader(this.webpackWrapper.compiler.createCompilation());\n\n    const plugin = this.webpackWrapper.plugin;\n    if (plugin && typeof plugin.options.pathTransformer === 'function') {\n      this._pathTransformer = plugin.options.pathTransformer;\n    }\n  }\n\n  readResource(path: string): Promise<string> {\n\n    if (this._pathTransformer) {\n      path = this._pathTransformer(path);\n      if (path === '') {\n        return Promise.resolve(path);\n      }\n    }\n\n    if (!this.fileExists(path)) {\n      throw new Error(`Compilation failed. Resource file not found: ${path}`);\n    }\n\n    return this._loader.get(path);\n  }\n}\n"]}